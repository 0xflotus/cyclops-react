{"name":"simple-react","tagline":"Advanced asynchronous Streams & Data Structures for Java 8","body":"#SimpleReact : Powerful Future Streams & Async Data Structures for Java 8\r\n\r\nSimpleReact is a Java 8 concurrent Streaming library. We provide three Stream types, and three asynchronous data structures.\r\n\r\n## Streams\r\n\r\n      List<String> results = LazyFutureStream.sequentialBuilder()\r\n                          .react(()->”new event1\",()->”new event2\")\r\n                          .retry(this::unreliable)\r\n                          .onFail(e->”default”)\r\n                          .peek(System.out::println)\r\n                          .capture(Throwable::printStackTrace)\r\n                          .block();\r\n\r\n* [LazyFutureStream](https://github.com/aol/simple-react/wiki/LazyFutureStream) : Provides a Lazy JDK 8 Stream of CompletableFutures (and Seq, and SimpleReact API methods). Can be used for constant proccessing (e.g. of data coming in off a SimpleReact asynchronous queue), automatically manages the number of active CompletableFuture chains.\r\n\r\n* SimpleReactStream : this provides [a simple, focused API for Streaming Futures](https://github.com/aol/simple-react#simplereactstream--a-simple-fluent-api-for-functional-reactive-programming-with-java-8) based on the Promises / A++ spec.\r\n\r\n* [EagerFutureStream](https://github.com/aol/simple-react/wiki/EagerFutureStream) : An easy to use JDK 8 Stream of CompletableFutures, with all of the SimpleReact API methods, and scala-like [jOOλ Seq](http://www.jooq.org/products/jOO%CE%BB/javadoc/0.9.5/org/jooq/lambda/Seq.html) methods too. EagerFutureStream kicks of future tasks eagerly (for all elements) and can be run in either parallel or sequential (free-threaded) modes. Useful for handling small to medium datasets that require blocking I/O steps.\r\n\r\n\r\n \r\n\r\n \r\n## Asynchronous datastructures\r\n\r\n* Queue : async queue that can be used to join producing and consuming streams. Multiple consuming streams (if connected) compete for messages on the queue.\r\n\r\n* Topic : async topic that can be used to join producing and consuming streams. Multiple consuming streams (if connected) recieve each message on the topic.\r\n\r\n* Signal : async signal that can stream changes, backed by either a Topic or a Queue.\r\n\r\n\r\n\r\n##Documentation\r\n\r\n* [Reactive programming with Java 8 and simple-react: The Tutorial](https://medium.com/@johnmcclean/reactive-programming-with-java-8-and-simple-react-the-tutorial-3634f512eeb1)\r\n* [wiki](https://github.com/aol/simple-react/wiki)\r\n* [Javadoc](http://www.javadoc.io/doc/com.aol.simplereact/simple-react/0.85)\r\n* [Articles on medium](https://medium.com/search?q=simplereact)\r\n* [simple-react Github](https://github.com/aol/simple-react)\r\n\r\n\r\n# Operators \r\n\r\n* retry\r\n* onFail\r\n* capture\r\n* then\r\n* combineLatest\r\n* withLatest\r\n* firstOf\r\n* anyOf\r\n* allOf\r\n* merge\r\n* with\r\n* shard\r\n* xPer\r\n* onePer\r\n* batchByTime\r\n* batchBySize\r\n* skipUntil(Stream)\r\n* takeUntil(Stream)\r\n* jitter\r\n* fixedDelay\r\n* cancel\r\n* limitFutures\r\n* skipFutures\r\n* sliceFutures\r\n* partitionFutures\r\n* splitAtFutures\r\n* zipFutures\r\n* zipFuturesWithIndex\r\n* thenSync\r\n* peekSync\r\n* filterSync\r\n* doOnEach\r\n* doOnEachSync\r\n* control\r\n* batch\r\n* chunkSinceLastRead\r\n* chunkSinceLastReadIterator\r\n* block\r\n* run\r\n\r\n* react\r\n* reactInfinetely\r\n\r\n* async\r\n* sync\r\n* zip\r\n* zipWithIndex\r\n* skipWhile\r\n* skipUntil\r\n* limitWhile\r\n* limitUntil\r\n* shuffle\r\n* reverse\r\n* intersperse\r\n* slice\r\n* splitAt\r\n* ofType\r\n* cast\r\n* cycle\r\n* unzip\r\n* scanLeft\r\n* scanRight\r\n* duplicate\r\n* partition\r\n* distinct\r\n* toList\r\n* toSet\r\n* toMap\r\n* minBy\r\n* maxBy\r\n* groupBy\r\n* join\r\n* foldLeft\r\n* foldRight\r\n* unfold\r\n* unzip\r\n* filter\r\n* map\r\n* flatMap\r\n* peek\r\n* limit\r\n* skip\r\n* mapToInt (etc)\r\n* sorted\r\n* distinct\r\n* collect\r\n* forEach\r\n* reduce\r\n* findFirst\r\n* findAny\r\n* anyMatch\r\n* allMatch\r\n* min\r\n* max\r\n* count\r\n* of\r\n* iterate\r\n* generate\r\n* concat\r\n\r\n# License\r\n\r\nSimple React is licensed under the Apache 2.0 license.\t\t\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}